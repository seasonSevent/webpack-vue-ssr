const express = require("express")const app = express()const path = require("path")const fs = require("fs");const LRU = require("lru-cache")const {createBundleRenderer} = require("vue-server-renderer");const resolve = file => path.resolve(__dirname,file)const isProd = process.env.NODE_ENV === 'production'const serverInfo =    `express/${require('express/package.json').version} ` +    `vue-server-renderer/${require('vue-server-renderer/package.json').version}`function createRenderer(bundle,options){    return createBundleRenderer(bundle,Object.assign(options,{        runInNewContext:false,    }))}const microCache = new LRU({    max: 100,    maxAge: 1000 * 60 // 重要提示：条目在 1 秒后过期。})const isCacheable = req =>{    console.log(req.url)    if (req.url === "/about"){        return true    }    return false;}let renderer;const templatePath = __dirname+"/index.template.html";if (isProd){    const template = fs.readFileSync(templatePath,"utf-8")    const bundle = require("../dist/vue-ssr-server-bundle.json")    const clientManifest = require("../dist/vue-ssr-client-manifest.json")    renderer = createRenderer(bundle,{        template,        clientManifest    })    app.use("/",express.static(path.resolve(__dirname,"../dist")))    app.use("/static",express.static(path.resolve(__dirname,"../dist/")))}else{    readyPromise = require("../build/set-dev-server")(        app,        templatePath,        (bundle,options)=>{            renderer = createRenderer(bundle,options)        }    )}function render (req,res){    const s = Date.now()    res.setHeader("Content-Type","text/html")    res.setHeader("Server",serverInfo)    const handleError = err =>{        if (err.url){            res.redirect(err.url)        }else if (err.code === 404){            res.status(404).end("404 | Page Not Found")        }else{            res.status(500).send('500 | Internal Server Error')            console.error(`error during render : ${req.url}`)            console.error(err.stack)        }    }    const context = {        title:"season",        url:req.url    }    const cacheable = isCacheable(req)    if (cacheable){        const hit = microCache.get(req.url)        console.log(hit)        if (hit){            return res.send = hit        }    }    renderer.renderToString(context,(err,html)=>{        if (err){            return handleError(err)        }        res.send(html)        if (cacheable){            microCache.set(req.url,html)        }        if (!isProd){            console.log(`whole request: ${Date.now() - s}ms`)        }    })}app.get("*",isProd?render:(req,res)=>{    readyPromise.then(()=> render(req,res))})app.listen(3000,()=>{    console.log("started listen port is 3000");    console.log("http://localhost:3000")})